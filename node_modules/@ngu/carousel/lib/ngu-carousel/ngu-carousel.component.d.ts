import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, IterableChanges, IterableDiffer, IterableDiffers, OnDestroy, OnInit, Renderer2, TrackByFunction } from '@angular/core';
import { Subscription } from 'rxjs';
import { NguCarouselOutlet } from './../ngu-carousel.directive';
import { NguCarouselStore } from './ngu-carousel';
import * as ɵngcc0 from '@angular/core';
export declare class NguCarousel<T> extends NguCarouselStore implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, DoCheck {
    private _el;
    private _renderer;
    private _differs;
    private platformId;
    private cdr;
    _dataSubscription: Subscription;
    _dataSource: any;
    _dataDiffer: IterableDiffer<{}>;
    styleid: string;
    private directionSym;
    private carouselCssNode;
    private pointIndex;
    private withAnim;
    activePoint: number;
    isHovered: boolean;
    private inputs;
    private carouselLoad;
    private onMove;
    arrayChanges: IterableChanges<{}>;
    carouselInt: Subscription;
    listener1: () => void;
    listener2: () => void;
    listener3: () => void;
    listener4: () => void;
    dataSource: any;
    private _defaultNodeDef;
    private _defDirec;
    _nodeOutlet: NguCarouselOutlet;
    /** The setter is used to catch the button if the button has ngIf
     * issue id #91
     */
    nextBtn: ElementRef;
    /** The setter is used to catch the button if the button has ngIf
     * issue id #91
     */
    prevBtn: ElementRef;
    private carouselMain1;
    private nguItemsContainer;
    private touchContainer;
    private _intervalController$;
    private carousel;
    private onResize;
    private onScrolling;
    pointNumbers: Array<any>;
    /**
     * Tracking function that will be used to check the differences in data changes. Used similarly
     * to `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data
     * relative to the function to know if a Items should be added/removed/moved.
     * Accepts a function that takes two parameters, `index` and `item`.
     */
    trackBy: TrackByFunction<T>;
    private _trackByFn;
    constructor(_el: ElementRef, _renderer: Renderer2, _differs: IterableDiffers, platformId: Object, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngDoCheck(): void;
    private _switchDataSource;
    private _observeRenderChanges;
    private renderNodeChanges;
    /**
     * Updates the index-related context for each row to reflect any changes in the index of the rows,
     * e.g. first/last/even/odd.
     */
    private _updateItemIndexContext;
    private _getNodeDef;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    private _inputValidation;
    ngOnDestroy(): void;
    private _onResizing;
    /** Get Touch input */
    private _touch;
    /** handle touch input */
    private _touchHandling;
    private _setTouchTransfrom;
    private _setTransformFromTouch;
    /** this fn used to disable the interval when it is not on the viewport */
    private _onWindowScrolling;
    /** store data based on width of the screen for the carousel */
    private _storeCarouselData;
    /** Used to reset the carousel */
    reset(withOutAnimation?: boolean): void;
    /** Init carousel point */
    private _carouselPoint;
    /** change the active point in carousel */
    private _carouselPointActiver;
    /** this function is used to scoll the carousel when point is clicked */
    moveTo(slide: number, withOutAnimation?: boolean): void;
    /** set the style of the carousel based the inputs data */
    private _carouselSize;
    /** logic to scroll the carousel step 1 */
    private _carouselScrollOne;
    /** logic to scroll the carousel step 2 */
    private _carouselScrollTwo;
    /** boolean function for making isFirst and isLast */
    private _btnBoolean;
    private _transformString;
    /** set the transform style to scroll the carousel  */
    private _transformStyle;
    /** this will trigger the carousel to load the items */
    private _carouselLoadTrigger;
    /** generate Class for each carousel to set specific style */
    private _generateID;
    /** handle the auto slide */
    private _carouselInterval;
    private _updateItemIndexContextAni;
    /** animate the carousel items */
    private _carouselAnimator;
    private _removeAnimations;
    /** Short form for setElementStyle */
    private _setStyle;
    /** For generating style tag */
    private _createStyleElem;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NguCarousel<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NguCarousel<any>, "ngu-carousel", never, { "dataSource": "dataSource"; "trackBy": "trackBy"; "inputs": "inputs"; }, { "carouselLoad": "carouselLoad"; "onMove": "onMove"; }, ["nextBtn", "prevBtn", "_defDirec"], ["[NguCarouselPrev]", "[NguCarouselNext]", "[NguCarouselPoint]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3UtY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRG9DaGVjaywgRWxlbWVudFJlZiwgSXRlcmFibGVDaGFuZ2VzLCBJdGVyYWJsZURpZmZlciwgSXRlcmFibGVEaWZmZXJzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBUcmFja0J5RnVuY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE5ndUNhcm91c2VsT3V0bGV0IH0gZnJvbSAnLi8uLi9uZ3UtY2Fyb3VzZWwuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmd1Q2Fyb3VzZWxTdG9yZSB9IGZyb20gJy4vbmd1LWNhcm91c2VsJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd1Q2Fyb3VzZWw8VD4gZXh0ZW5kcyBOZ3VDYXJvdXNlbFN0b3JlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfZWw7XHJcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcclxuICAgIHByaXZhdGUgX2RpZmZlcnM7XHJcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XHJcbiAgICBwcml2YXRlIGNkcjtcclxuICAgIF9kYXRhU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICBfZGF0YVNvdXJjZTogYW55O1xyXG4gICAgX2RhdGFEaWZmZXI6IEl0ZXJhYmxlRGlmZmVyPHt9PjtcclxuICAgIHN0eWxlaWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgZGlyZWN0aW9uU3ltO1xyXG4gICAgcHJpdmF0ZSBjYXJvdXNlbENzc05vZGU7XHJcbiAgICBwcml2YXRlIHBvaW50SW5kZXg7XHJcbiAgICBwcml2YXRlIHdpdGhBbmltO1xyXG4gICAgYWN0aXZlUG9pbnQ6IG51bWJlcjtcclxuICAgIGlzSG92ZXJlZDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgaW5wdXRzO1xyXG4gICAgcHJpdmF0ZSBjYXJvdXNlbExvYWQ7XHJcbiAgICBwcml2YXRlIG9uTW92ZTtcclxuICAgIGFycmF5Q2hhbmdlczogSXRlcmFibGVDaGFuZ2VzPHt9PjtcclxuICAgIGNhcm91c2VsSW50OiBTdWJzY3JpcHRpb247XHJcbiAgICBsaXN0ZW5lcjE6ICgpID0+IHZvaWQ7XHJcbiAgICBsaXN0ZW5lcjI6ICgpID0+IHZvaWQ7XHJcbiAgICBsaXN0ZW5lcjM6ICgpID0+IHZvaWQ7XHJcbiAgICBsaXN0ZW5lcjQ6ICgpID0+IHZvaWQ7XHJcbiAgICBkYXRhU291cmNlOiBhbnk7XHJcbiAgICBwcml2YXRlIF9kZWZhdWx0Tm9kZURlZjtcclxuICAgIHByaXZhdGUgX2RlZkRpcmVjO1xyXG4gICAgX25vZGVPdXRsZXQ6IE5ndUNhcm91c2VsT3V0bGV0O1xyXG4gICAgLyoqIFRoZSBzZXR0ZXIgaXMgdXNlZCB0byBjYXRjaCB0aGUgYnV0dG9uIGlmIHRoZSBidXR0b24gaGFzIG5nSWZcclxuICAgICAqIGlzc3VlIGlkICM5MVxyXG4gICAgICovXHJcbiAgICBuZXh0QnRuOiBFbGVtZW50UmVmO1xyXG4gICAgLyoqIFRoZSBzZXR0ZXIgaXMgdXNlZCB0byBjYXRjaCB0aGUgYnV0dG9uIGlmIHRoZSBidXR0b24gaGFzIG5nSWZcclxuICAgICAqIGlzc3VlIGlkICM5MVxyXG4gICAgICovXHJcbiAgICBwcmV2QnRuOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBjYXJvdXNlbE1haW4xO1xyXG4gICAgcHJpdmF0ZSBuZ3VJdGVtc0NvbnRhaW5lcjtcclxuICAgIHByaXZhdGUgdG91Y2hDb250YWluZXI7XHJcbiAgICBwcml2YXRlIF9pbnRlcnZhbENvbnRyb2xsZXIkO1xyXG4gICAgcHJpdmF0ZSBjYXJvdXNlbDtcclxuICAgIHByaXZhdGUgb25SZXNpemU7XHJcbiAgICBwcml2YXRlIG9uU2Nyb2xsaW5nO1xyXG4gICAgcG9pbnROdW1iZXJzOiBBcnJheTxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFja2luZyBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBjaGVjayB0aGUgZGlmZmVyZW5jZXMgaW4gZGF0YSBjaGFuZ2VzLiBVc2VkIHNpbWlsYXJseVxyXG4gICAgICogdG8gYG5nRm9yYCBgdHJhY2tCeWAgZnVuY3Rpb24uIE9wdGltaXplIEl0ZW1zIG9wZXJhdGlvbnMgYnkgaWRlbnRpZnlpbmcgYSBJdGVtcyBiYXNlZCBvbiBpdHMgZGF0YVxyXG4gICAgICogcmVsYXRpdmUgdG8gdGhlIGZ1bmN0aW9uIHRvIGtub3cgaWYgYSBJdGVtcyBzaG91bGQgYmUgYWRkZWQvcmVtb3ZlZC9tb3ZlZC5cclxuICAgICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIHR3byBwYXJhbWV0ZXJzLCBgaW5kZXhgIGFuZCBgaXRlbWAuXHJcbiAgICAgKi9cclxuICAgIHRyYWNrQnk6IFRyYWNrQnlGdW5jdGlvbjxUPjtcclxuICAgIHByaXZhdGUgX3RyYWNrQnlGbjtcclxuICAgIGNvbnN0cnVjdG9yKF9lbDogRWxlbWVudFJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIF9kaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIHBsYXRmb3JtSWQ6IE9iamVjdCwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9zd2l0Y2hEYXRhU291cmNlO1xyXG4gICAgcHJpdmF0ZSBfb2JzZXJ2ZVJlbmRlckNoYW5nZXM7XHJcbiAgICBwcml2YXRlIHJlbmRlck5vZGVDaGFuZ2VzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBpbmRleC1yZWxhdGVkIGNvbnRleHQgZm9yIGVhY2ggcm93IHRvIHJlZmxlY3QgYW55IGNoYW5nZXMgaW4gdGhlIGluZGV4IG9mIHRoZSByb3dzLFxyXG4gICAgICogZS5nLiBmaXJzdC9sYXN0L2V2ZW4vb2RkLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF91cGRhdGVJdGVtSW5kZXhDb250ZXh0O1xyXG4gICAgcHJpdmF0ZSBfZ2V0Tm9kZURlZjtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9pbnB1dFZhbGlkYXRpb247XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfb25SZXNpemluZztcclxuICAgIC8qKiBHZXQgVG91Y2ggaW5wdXQgKi9cclxuICAgIHByaXZhdGUgX3RvdWNoO1xyXG4gICAgLyoqIGhhbmRsZSB0b3VjaCBpbnB1dCAqL1xyXG4gICAgcHJpdmF0ZSBfdG91Y2hIYW5kbGluZztcclxuICAgIHByaXZhdGUgX3NldFRvdWNoVHJhbnNmcm9tO1xyXG4gICAgcHJpdmF0ZSBfc2V0VHJhbnNmb3JtRnJvbVRvdWNoO1xyXG4gICAgLyoqIHRoaXMgZm4gdXNlZCB0byBkaXNhYmxlIHRoZSBpbnRlcnZhbCB3aGVuIGl0IGlzIG5vdCBvbiB0aGUgdmlld3BvcnQgKi9cclxuICAgIHByaXZhdGUgX29uV2luZG93U2Nyb2xsaW5nO1xyXG4gICAgLyoqIHN0b3JlIGRhdGEgYmFzZWQgb24gd2lkdGggb2YgdGhlIHNjcmVlbiBmb3IgdGhlIGNhcm91c2VsICovXHJcbiAgICBwcml2YXRlIF9zdG9yZUNhcm91c2VsRGF0YTtcclxuICAgIC8qKiBVc2VkIHRvIHJlc2V0IHRoZSBjYXJvdXNlbCAqL1xyXG4gICAgcmVzZXQod2l0aE91dEFuaW1hdGlvbj86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgLyoqIEluaXQgY2Fyb3VzZWwgcG9pbnQgKi9cclxuICAgIHByaXZhdGUgX2Nhcm91c2VsUG9pbnQ7XHJcbiAgICAvKiogY2hhbmdlIHRoZSBhY3RpdmUgcG9pbnQgaW4gY2Fyb3VzZWwgKi9cclxuICAgIHByaXZhdGUgX2Nhcm91c2VsUG9pbnRBY3RpdmVyO1xyXG4gICAgLyoqIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBzY29sbCB0aGUgY2Fyb3VzZWwgd2hlbiBwb2ludCBpcyBjbGlja2VkICovXHJcbiAgICBtb3ZlVG8oc2xpZGU6IG51bWJlciwgd2l0aE91dEFuaW1hdGlvbj86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgLyoqIHNldCB0aGUgc3R5bGUgb2YgdGhlIGNhcm91c2VsIGJhc2VkIHRoZSBpbnB1dHMgZGF0YSAqL1xyXG4gICAgcHJpdmF0ZSBfY2Fyb3VzZWxTaXplO1xyXG4gICAgLyoqIGxvZ2ljIHRvIHNjcm9sbCB0aGUgY2Fyb3VzZWwgc3RlcCAxICovXHJcbiAgICBwcml2YXRlIF9jYXJvdXNlbFNjcm9sbE9uZTtcclxuICAgIC8qKiBsb2dpYyB0byBzY3JvbGwgdGhlIGNhcm91c2VsIHN0ZXAgMiAqL1xyXG4gICAgcHJpdmF0ZSBfY2Fyb3VzZWxTY3JvbGxUd287XHJcbiAgICAvKiogYm9vbGVhbiBmdW5jdGlvbiBmb3IgbWFraW5nIGlzRmlyc3QgYW5kIGlzTGFzdCAqL1xyXG4gICAgcHJpdmF0ZSBfYnRuQm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3RyYW5zZm9ybVN0cmluZztcclxuICAgIC8qKiBzZXQgdGhlIHRyYW5zZm9ybSBzdHlsZSB0byBzY3JvbGwgdGhlIGNhcm91c2VsICAqL1xyXG4gICAgcHJpdmF0ZSBfdHJhbnNmb3JtU3R5bGU7XHJcbiAgICAvKiogdGhpcyB3aWxsIHRyaWdnZXIgdGhlIGNhcm91c2VsIHRvIGxvYWQgdGhlIGl0ZW1zICovXHJcbiAgICBwcml2YXRlIF9jYXJvdXNlbExvYWRUcmlnZ2VyO1xyXG4gICAgLyoqIGdlbmVyYXRlIENsYXNzIGZvciBlYWNoIGNhcm91c2VsIHRvIHNldCBzcGVjaWZpYyBzdHlsZSAqL1xyXG4gICAgcHJpdmF0ZSBfZ2VuZXJhdGVJRDtcclxuICAgIC8qKiBoYW5kbGUgdGhlIGF1dG8gc2xpZGUgKi9cclxuICAgIHByaXZhdGUgX2Nhcm91c2VsSW50ZXJ2YWw7XHJcbiAgICBwcml2YXRlIF91cGRhdGVJdGVtSW5kZXhDb250ZXh0QW5pO1xyXG4gICAgLyoqIGFuaW1hdGUgdGhlIGNhcm91c2VsIGl0ZW1zICovXHJcbiAgICBwcml2YXRlIF9jYXJvdXNlbEFuaW1hdG9yO1xyXG4gICAgcHJpdmF0ZSBfcmVtb3ZlQW5pbWF0aW9ucztcclxuICAgIC8qKiBTaG9ydCBmb3JtIGZvciBzZXRFbGVtZW50U3R5bGUgKi9cclxuICAgIHByaXZhdGUgX3NldFN0eWxlO1xyXG4gICAgLyoqIEZvciBnZW5lcmF0aW5nIHN0eWxlIHRhZyAqL1xyXG4gICAgcHJpdmF0ZSBfY3JlYXRlU3R5bGVFbGVtO1xyXG59XHJcbiJdfQ==